version: "3.9"

services:
  db:
    image: postgres:16
    container_name: ctpathology-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TZ: "Europe/Amsterdam"
      PGTZ: "Europe/Amsterdam"
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data:rw
      - ./database/create_table.sql:/docker-entrypoint-initdb.d/01_create_table.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks:
      - backend

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: ctpathology-api
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      API_PREFIX: /api
      MAX_UPLOAD_MB: 200
      TZ: "Europe/Amsterdam"
      TMPDIR: "/tmp"
      OMP_NUM_THREADS: "1"
      OPENBLAS_NUM_THREADS: "1"
      MKL_NUM_THREADS: "1"
      VECLIB_MAXIMUM_THREADS: "1"
      NUMEXPR_NUM_THREADS: "1"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${API_PORT}:8000"
    networks: [backend]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      API_PREFIX: "/api"
      API_HOST: "ctpathology-api"    # имя контейнера бэка
      API_PORT: "8000"
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - api
    networks: [backend]              # <— КРИТИЧНО: одна сеть с api

volumes:
  db_data:

networks:
  backend:
    driver: bridge